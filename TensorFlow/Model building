#Binary classifiers

#2DS method

#Three 2D conv layers + one fully connected layer 
model = models.Sequential([
                    layers.Conv2D(filters=32, kernel_size=(2,2), strides=(2,2), activation='relu', kernel_regularizer=regularizers.l1_l2(l1=0.005, l2=0.005), padding, input_shape=gene_sim.data.shape[1:]),
                    layers.Conv2D(filters=32, kernel_size=(2,2), strides=(2,2), activation='relu', kernel_regularizer=regularizers.l1_l2(l1=0.005, l2=0.005), padding$
                    layers.Conv2D(filters=64, kernel_size=(2,2), strides=(2,2), activation='relu', kernel_regularizer=regularizers.l1_l2(l1=0.005, l2=0.005), padding$
                    layers.Flatten(),
                    layers.Dense(units=128, activation='relu'),
                    layers.Dense(units=1, activation='sigmoid')])

#Optimiser and loss function
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

#1DU method - did not use sequential method as was not compatible with permutation invariant function 

#Two 2D conv & maxpool layers, permutation invariant function + two fully connected layers
inputs = tf.keras.Input(shape=gene_sim.data.shape[1:])
x2 = tf.keras.layers.Conv2D(filters=32, kernel_size=(1,5), strides=(1,1), activation='relu', kernel_regularizer=regularizers.l1_l2(l1=0.005, l2=0.005), padding='vali$
x3 = tf.keras.layers.MaxPool2D(pool_size = (1,2), strides = (1,2))(x2)
x4 = tf.keras.layers.Conv2D(filters=64, kernel_size=(1,5), strides=(1,1), activation='relu', kernel_regularizer=regularizers.l1_l2(l1=0.005, l2=0.005), padding='vali$
x5 = tf.keras.layers.MaxPool2D(pool_size = (1,2), strides = (1,2))(x4)
x6 = tf.math.reduce_sum(x5, axis=1)
x7 = tf.keras.layers.Flatten()(x6)
x8 = tf.keras.layers.Dense(units=128, activation='relu')(x7)
x9 = tf.keras.layers.Dense(units=128, activation='relu')(x8)
outputs = tf.keras.layers.Dense(units=1, activation='sigmoid')(x9)

model = tf.keras.Model(inputs=inputs, outputs=outputs)

#Optimiser and loss function
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])
